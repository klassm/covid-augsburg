{"version":3,"sources":["facade/fetchData.ts","facade/RegionStorage.ts","administerRegions/AdministerRegionsDialog.tsx","topBar/TopBar.tsx","region/Region.tsx","region/RegionList.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["baseUrl","useAvailableRegions","useQuery","fetchAvailableRegions","a","axios","get","response","data","fetchRegion","rs","cookieKey","defaultRegions","userRegionsQueryKey","useUserRegions","getUserRegions","saveRegions","cookies","set","JSON","stringify","sameSite","expires","cookieValue","parse","useStyles","makeStyles","theme","appBar","position","title","marginLeft","spacing","flex","AdministerRegionsDialog","onClose","classes","regions","userRegions","removeRegion","queryClient","useQueryClient","useMutation","toRemove","filter","onSettled","invalidateQueries","useRemoveRegion","mutateAsync","setRegions","newRegions","useSetRegions","reorder","list","startIndex","endIndex","result","Array","from","splice","removed","onDragEnd","source","destination","index","Dialog","fullScreen","open","AppBar","className","Toolbar","IconButton","edge","color","onClick","aria-label","Typography","variant","LinearProgress","indexedRegions","keyBy","region","toRender","map","ListItemAny","ListItem","listItems","item","draggableId","provided","ContainerComponent","ContainerProps","ref","innerRef","draggableProps","dragHandleProps","ListItemText","primary","name","ListItemSecondaryAction","droppableId","RootRef","rootRef","List","dense","placeholder","renderList","root","flexGrow","menuButton","marginRight","display","breakpoints","up","search","borderRadius","shape","backgroundColor","fade","palette","common","white","width","searchIcon","padding","height","pointerEvents","alignItems","justifyContent","inputRoot","inputInput","paddingLeft","transition","transitions","create","TopBar","showAdministerDialog","addRegion","uniq","useAddRegion","useState","query","setQuery","loadedRegions","onSelectRegion","noWrap","Autocomplete","id","style","inputValue","disableListWrap","getOptionLabel","option","options","clearOnBlur","onChange","_event","value","renderInput","params","InputLabelProps","InputProps","rest","InputBase","e","target","input","renderOption","createStyles","body","colors","undefined","formatIncidence","incidence","Math","ceil","Region","regionData","useRegion","graphData","takeRight","entries","day","date","split","slice","join","colorIndexFor","casesDiff","diff","abs","formattedIncidence","ResponsiveContainer","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","tick","fontSize","dataKey","YAxis","Bar","entry","Cell","fill","LabelList","loadingIndicator","marginTop","RegionList","availableRegions","savedRegions","CircularProgress","size","some","QueryClient","footer","textAlign","App","setShowAdministerDialog","QueryClientProvider","client","href","rel","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","waiting","postMessage","type"],"mappings":"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","file":"static/js/main.b0224038.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { useQuery } from \"react-query\";\n\nconst baseUrl = \"https://raw.githubusercontent.com/klassm/covid-historie/master/rki-scrape/data\"\n\nexport interface DayData {\n  date: string;\n  incidence: number;\n  cases: number;\n  casesDiff: number;\n}\n\nexport interface Region {\n  rs: string;\n  name: string;\n}\n\nexport interface RegionWithData extends Region {\n  entries: DayData[]\n}\n\n\nexport function useAvailableRegions() {\n  return useQuery(\"available-regions\", fetchAvailableRegions)\n}\n\nexport async function fetchAvailableRegions(): Promise<Region[]> {\n  const response = await axios.get(`${baseUrl}/regions.json`)\n  return response.data;\n}\n\nexport function useRegion(rs: string) {\n  return useQuery([rs, \"region\"], async () => fetchRegion(rs))\n}\n\nexport async function fetchRegion(rs: string): Promise<RegionWithData> {\n  const response = await axios.get(`${baseUrl}/${rs}.json`)\n  return response.data;\n}\n","import cookies from 'js-cookie';\nimport { uniq } from 'lodash';\nimport { useMutation, useQuery, UseMutationResult } from \"react-query\";\nimport { useQueryClient } from 'react-query';\n\nconst cookieKey = 'regions';\nconst defaultRegions = ['09761', '09772'];\nconst userRegionsQueryKey = \"user-regions\";\n\nexport function useUserRegions() {\n  return useQuery(userRegionsQueryKey, getUserRegions)\n}\n\nfunction saveRegions(rs: string[]) {\n  cookies.set(cookieKey, JSON.stringify(rs), { sameSite: 'lax', expires: 3650 });\n}\n\nexport function useAddRegion(): UseMutationResult<void, unknown, { rs: string }> {\n  const queryClient = useQueryClient()\n\n  return useMutation<void, unknown, { rs: string }>(async ({ rs }) => {\n    const regions: string[] = uniq([...getUserRegions(), rs]);\n    await saveRegions(regions);\n  }, {\n    onSettled: () => queryClient.invalidateQueries(userRegionsQueryKey)\n  })\n}\n\nexport function useRemoveRegion(): UseMutationResult<void, unknown, { rs: string }> {\n  const queryClient = useQueryClient()\n  return useMutation<void, unknown, { rs: string }>(async ({ rs: toRemove }) => {\n    const newRegions = getUserRegions().filter(rs => toRemove !== rs);\n    saveRegions(newRegions);\n  }, {\n    onSettled: () => queryClient.invalidateQueries(userRegionsQueryKey)\n  })\n}\n\nexport function useSetRegions(): UseMutationResult<void, unknown, { newRegions: string[] }> {\n  const queryClient = useQueryClient()\n  return useMutation<void, unknown, { newRegions: string[] }>(async ({ newRegions }) => {\n    saveRegions(newRegions);\n  }, {\n    onSettled: () => queryClient.invalidateQueries(userRegionsQueryKey)\n  })\n}\n\nfunction getUserRegions(): string[] {\n  const cookieValue = cookies.get(cookieKey);\n  if (!cookieValue) {\n    return defaultRegions;\n  }\n  return JSON.parse(cookieValue) as string[];\n}\n","import {\n  AppBar,\n  Dialog,\n  IconButton,\n  LinearProgress,\n  List,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  makeStyles,\n  Toolbar,\n  Typography\n} from \"@material-ui/core\";\nimport RootRef from \"@material-ui/core/RootRef\";\nimport CloseIcon from '@material-ui/icons/Close';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { keyBy } from \"lodash\";\nimport { FunctionComponent} from \"react\";\nimport { DragDropContext, Draggable, Droppable, DropResult } from \"react-beautiful-dnd\";\nimport { useAvailableRegions } from \"../facade/fetchData\";\nimport { useRemoveRegion, useSetRegions, useUserRegions } from \"../facade/RegionStorage\";\n\ninterface Props {\n  onClose: () => void\n}\n\nconst useStyles = makeStyles((theme) => ( {\n  appBar: {\n    position: 'relative',\n  },\n  title: {\n    marginLeft: theme.spacing(2),\n    flex: 1,\n  },\n} ));\n\nexport const AdministerRegionsDialog: FunctionComponent<Props> = ({ onClose }) => {\n  const classes = useStyles();\n  const { data: regions } = useAvailableRegions()\n  const { data: userRegions } = useUserRegions();\n  const { mutateAsync: removeRegion } = useRemoveRegion();\n  const { mutateAsync: setRegions } = useSetRegions();\n\n  function reorder<T>(list: T[], startIndex: number, endIndex: number): T[] {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  }\n\n  async function onDragEnd({ source, destination }: DropResult) {\n    if (!destination) {\n      return;\n    }\n\n    const newRegions = reorder(\n      userRegions ?? [],\n      source.index,\n      destination.index\n    );\n    await setRegions({ newRegions });\n  }\n\n  function renderList() {\n    if (!regions || !userRegions) {\n      return <LinearProgress/>\n    }\n\n    const indexedRegions = keyBy(regions, region => region.rs);\n    const toRender = userRegions.map(rs => indexedRegions[rs]);\n    const ListItemAny = ListItem as any;\n    const listItems = toRender.map((item, index) => (\n      <Draggable draggableId={ item.rs } key={ item.rs } index={ index }>\n        { (provided) => (\n          <ListItemAny\n            ContainerComponent=\"li\"\n            ContainerProps={ { ref: provided.innerRef } }\n            { ...provided.draggableProps }\n            { ...provided.dragHandleProps }\n          >\n            <ListItemText\n              primary={ item.name }\n            />\n            <ListItemSecondaryAction>\n              <IconButton edge=\"end\" aria-label=\"delete\" onClick={ async () => removeRegion({ rs: item.rs }) }>\n                <DeleteIcon/>\n              </IconButton>\n            </ListItemSecondaryAction>\n          </ListItemAny>\n        ) }\n      </Draggable>\n    ));\n\n    return <DragDropContext onDragEnd={ onDragEnd }>\n      <Droppable droppableId=\"rs_droppable\">\n        { (provided) => (\n          <RootRef rootRef={ provided.innerRef }>\n            <List dense={ true }>\n              { listItems }\n              { provided.placeholder }\n            </List>\n          </RootRef>\n        ) }\n      </Droppable>\n    </DragDropContext>\n  }\n\n  return <Dialog fullScreen open={ true } onClose={ onClose }>\n    <AppBar className={ classes.appBar }>\n      <Toolbar>\n        <IconButton edge=\"start\" color=\"inherit\" onClick={ onClose } aria-label=\"close\">\n          <CloseIcon/>\n        </IconButton>\n        <Typography variant=\"h6\" className={ classes.title }>\n          Kreise verwalten\n        </Typography>\n      </Toolbar>\n    </AppBar>\n    { renderList() }\n  </Dialog>\n}\n","import { AppBar, fade, IconButton, InputBase, makeStyles, Toolbar, Typography } from \"@material-ui/core\";\nimport { FunctionComponent, useState } from \"react\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { Region, useAvailableRegions } from \"../facade/fetchData\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useAddRegion } from \"../facade/RegionStorage\";\n\nconst useStyles = makeStyles((theme) => ( {\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    padding: theme.spacing(0, 2),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 0),\n    // vertical padding + font size from searchIcon\n    paddingLeft: `calc(1em + ${ theme.spacing(4) }px)`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '20ch',\n      '&:focus': {\n        width: '30ch',\n      },\n    },\n  },\n} ));\n\ninterface Props {\n  showAdministerDialog: () => void;\n}\n\nexport const TopBar: FunctionComponent<Props> = ({showAdministerDialog}) => {\n  const classes = useStyles();\n  const { data: regions } = useAvailableRegions()\n  const { mutateAsync: addRegion } = useAddRegion();\n  const [query, setQuery] = useState(\"\");\n  const loadedRegions = regions ?? [];\n\n  async function onSelectRegion(region: Region | null): Promise<void> {\n    setQuery('');\n    if (region !== null) {\n      await addRegion(region);\n    }\n  }\n\n  return <div className={ classes.root }>\n    <AppBar>\n      <Toolbar>\n        <Typography variant=\"h6\" noWrap className={ classes.title }>\n          COVID Historie\n        </Typography>\n        <div className={ classes.search }>\n          <div className={ classes.searchIcon }>\n            <SearchIcon/>\n          </div>\n          <Autocomplete\n            id=\"rs-select\"\n            style={ { width: 300 } }\n            inputValue={query}\n            disableListWrap\n            getOptionLabel={ option => option.name }\n            options={ loadedRegions }\n            clearOnBlur={true}\n            onChange={ async (_event: any, value: any) => onSelectRegion(value) }\n            renderInput={ (params) => {\n              const { InputLabelProps, InputProps, ...rest } = params;\n              return <InputBase\n                placeholder=\"Kreis hinzufügen…\"\n                onChange={ (e): void => setQuery(e.target.value) }\n                { ...params.InputProps } { ...rest }\n                classes={ {\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                } }\n              />;\n            } }\n            renderOption={ (option) => <Typography noWrap>{ option.name }</Typography> }\n          />\n        </div>\n        <IconButton aria-label=\"display more actions\" edge=\"end\" color=\"inherit\" onClick={showAdministerDialog}>\n          <SettingsIcon/>\n        </IconButton>\n      </Toolbar>\n    </AppBar>\n  </div>\n}\n","import { createStyles, makeStyles } from \"@material-ui/core\";\nimport { takeRight } from \"lodash\";\nimport React, { FunctionComponent } from \"react\";\nimport { Bar, BarChart, CartesianGrid, Cell, LabelList, ResponsiveContainer, XAxis, YAxis } from 'recharts';\n\nimport { useRegion } from \"../facade/fetchData\";\n\ninterface Props {\n  rs: string;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    body: {\n      padding: 5\n    }\n  })\n);\n\nfunction formatDiff(diff: number | undefined): string {\n  if (diff === undefined || diff === 0) {\n    return \"\";\n  }\n  return diff > 0 ? `+${ diff }` : `-${ Math.abs(diff) }`;\n}\n\nconst colors = [undefined, \"#fefac0\", \"#f6c97a\", \"#ec925b\", \"#dc543f\", \"#ac3135\"]\n\nfunction colorIndexFor(incidence: number): number {\n  if (incidence > 200) {\n    return 5;\n  }\n  if (incidence > 100) {\n    return 4;\n  }\n  if (incidence > 50) {\n    return 3;\n  }\n  if (incidence > 35) {\n    return 2;\n  }\n  return 1;\n}\n\nfunction colorFor(incidence: number): string | undefined {\n  return colors[colorIndexFor(incidence)];\n}\n\nfunction formatIncidence(incidence: number): number {\n  if (incidence > 100) {\n    return Math.ceil(incidence);\n  }\n\n  return Math.ceil(incidence * 10) / 10;\n}\n\ninterface Entry {\n  date: string;\n  incidence: number;\n  color: string | undefined;\n}\n\nexport const Region: FunctionComponent<Props> = ({ rs }) => {\n  const classes = useStyles();\n  const { data: regionData } = useRegion(rs)\n  if (!regionData) {\n    return null;\n  }\n\n  const graphData: Entry[] = takeRight(regionData.entries, 10)\n    .map(day => ( { ...day, date: day.date.split(\".\").slice(0, 2).join(\".\") } ))\n    .map(day => ( {\n      date: day.date,\n      incidence: day.incidence,\n      color: colorFor(day.incidence),\n      casesDiff: formatDiff(day.casesDiff),\n      formattedIncidence: formatIncidence(day.incidence)\n    } ));\n\n  return <div className={ classes.body }>\n    <h3>{ regionData.name }</h3>\n\n    <ResponsiveContainer height={300}>\n    <BarChart\n      data={ graphData }\n      margin={ {\n        top: 5,\n        right: 5,\n        left: 5,\n        bottom: 5,\n      } }\n    >\n      <CartesianGrid strokeDasharray=\"3 3\"/>\n      <XAxis tick={{fontSize: 12}} dataKey=\"date\"/>\n      <YAxis tick={{fontSize: 10}} width={18}/>\n      <Bar dataKey=\"incidence\">\n        {\n          graphData.map((entry, index) => (\n            <>\n              <Cell key={ `cell-${ index }` } fill={ entry.color }/>\n              <LabelList dataKey=\"casesDiff\" position=\"top\" fill=\"#000000\" fontSize={12}/>\n              <LabelList dataKey=\"formattedIncidence\" position=\"insideBottom\" fill=\"#000000\" fontSize={12}/>\n            </>\n          ))\n        }\n      </Bar>\n    </BarChart>\n    </ResponsiveContainer>\n  </div>\n}\n","import { makeStyles } from \"@material-ui/core\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport React, { FunctionComponent } from \"react\";\nimport { useAvailableRegions } from \"../facade/fetchData\";\nimport { useUserRegions } from \"../facade/RegionStorage\";\nimport { Region } from \"./Region\";\n\nconst useStyles = makeStyles(() => ( {\n    loadingIndicator: {\n      display: 'flex',\n      justifyContent: 'center',\n      marginTop: 30\n    },\n  }\n))\n\nexport const RegionList: FunctionComponent = () => {\n  const classes = useStyles();\n\n  const { data: availableRegions } = useAvailableRegions()\n  const {data: savedRegions } = useUserRegions();\n\n  if (!availableRegions || !savedRegions) {\n    return <div className={classes.loadingIndicator}><CircularProgress size={80}/></div>\n  }\n\n  const regionsToDisplay = savedRegions.filter(rs => availableRegions.some(region => region.rs === rs));\n\n  const regions = regionsToDisplay.map(rs => <Region key={`region_${rs}`} rs={rs}/>)\n  return <div>{regions}</div>\n}\n","import { makeStyles } from \"@material-ui/core\";\nimport React, { FunctionComponent, useState } from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { AdministerRegionsDialog } from \"./administerRegions/AdministerRegionsDialog\";\nimport { TopBar } from \"./topBar/TopBar\";\nimport { RegionList } from \"./region/RegionList\";\n\nconst queryClient = new QueryClient()\n\nconst useStyles = makeStyles(() => ( {\n    body: {\n      margin: 10,\n      marginTop: 80\n    },\n    footer: {\n      fontSize: '0.5m',\n      textAlign: 'center'\n    }\n  }\n))\n\nexport const App: FunctionComponent = () => {\n  const classes = useStyles();\n  const [showAdministerDialog, setShowAdministerDialog] = useState(false);\n\n  function renderAdministerDialog() {\n    return showAdministerDialog ? <AdministerRegionsDialog onClose={ () => setShowAdministerDialog(false) }/> : null\n  }\n\n  return (\n    <QueryClientProvider client={ queryClient }>\n      { renderAdministerDialog() }\n      <TopBar showAdministerDialog={ () => setShowAdministerDialog(true) }/>\n      <div className={ classes.body }>\n        <div>\n          <RegionList/>\n        </div>\n        <p className={classes.footer}>\n          Die auf dieser Seite angezeigten Daten stammen vom <a\n          href=\"https://npgeo-corona-npgeo-de.hub.arcgis.com/datasets/917fc37a709542548cc3be077a786c17_0/geoservice?geometry=-30.849%2C46.211%2C52.867%2C55.839\"\n          target=\"_blank\"\n          rel=\"noreferrer\" >RKI</a>.\n        </p>\n      </div>\n    </QueryClientProvider>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register({\n  onUpdate: registration => {\n    if (registration && registration.waiting) {\n      registration.waiting.postMessage({ type: 'SKIP_WAITING' });\n    }\n    window.location.reload();\n  }\n});\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}