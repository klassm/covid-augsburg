{"version":3,"sources":["facade/fetchData.ts","region/Region.tsx","region/RegionList.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["baseUrl","fetchAvailableRegions","a","axios","get","response","data","fetchRegion","rs","useStyles","makeStyles","createStyles","body","padding","colors","Region","classes","regionData","useQuery","useRegion","screenWidth","window","innerWidth","entries","slice","map","day","date","split","join","graphData","x","y","incidence","color","casesLabelsData","label","diff","casesDiff","undefined","Math","abs","incidenceLabelsData","ceil","className","name","height","width","xType","colorType","barWidth","colorRange","colorDomain","labelAnchorX","RegionList","CircularProgress","regions","queryClient","QueryClient","App","QueryClientProvider","client","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.0b482ad6.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { useQuery } from \"react-query\";\n\nconst baseUrl = \"https://raw.githubusercontent.com/klassm/covid-augsburg/master/rki-scrape/data\"\n\nexport interface DayData {\n  date: string;\n  incidence: number;\n  cases: number;\n  casesDiff: number;\n}\n\nexport interface Region {\n  rs: string;\n  name: string;\n  entries: DayData[]\n}\n\nexport function useAvailableRegions() {\n  return useQuery(\"available-regions\", fetchAvailableRegions)\n}\n\nexport async function fetchAvailableRegions(): Promise<string[]> {\n  const response = await axios.get(`${baseUrl}/all.json`)\n  return response.data;\n}\n\nexport function useRegion(rs: string) {\n  return useQuery([rs, \"region\"], async () => fetchRegion(rs))\n}\n\nexport async function fetchRegion(rs: string): Promise<Region> {\n  const response = await axios.get(`${baseUrl}/${rs}.json`)\n  return response.data;\n}\n","import { createStyles, makeStyles } from \"@material-ui/core\";\nimport React, { FunctionComponent } from \"react\";\nimport {\n  HorizontalGridLines, LabelSeries,\n  VerticalBarSeries,\n  VerticalGridLines,\n  XAxis,\n  XYPlot,\n  YAxis\n} from \"react-vis\";\nimport { useRegion } from \"../facade/fetchData\";\nimport '../../node_modules/react-vis/dist/style.css';\n\ninterface Props {\n  rs: string;\n}\n\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    body: {\n      padding: 5\n    }\n  })\n);\n\nfunction formatDiff(diff: number | undefined): string {\n  if (diff === undefined) {\n    return \"\";\n  }\n  return diff > 0 ? `+ ${diff}` : `- ${Math.abs(diff)}`;\n}\n\nconst colors = [\"#fefac0\", \"#f6c97a\", \"#ec925b\", \"#dc543f\", \"#ac3135\"]\nfunction colorFor(incidence: number): number {\n\n  if (incidence > 200) {\n    return 4;\n  }\n  if (incidence > 100) {\n    return 3;\n  }\n  if (incidence > 50) {\n    return 2;\n  }\n  if (incidence > 35) {\n    return 1;\n  }\n  return 0;\n}\n\nexport const Region: FunctionComponent<Props> = ({ rs }) => {\n  const classes = useStyles();\n  const { data: regionData } = useRegion(rs)\n  if (!regionData) {\n    return null;\n  }\n\n  const screenWidth = window.innerWidth - 20;\n  const entries = regionData.entries\n    .slice(0, 10)\n    .map(day => ({...day, date: day.date.split(\".\").slice(0, 2).join(\".\")}));\n  const graphData = entries\n    .map(day => ({x: day.date, y: day.incidence, color: colorFor(day.incidence)}));\n  const casesLabelsData = entries.map((day) => ({x: day.date as any, y: day.incidence + 15, label: formatDiff(day.casesDiff)}))\n  const incidenceLabelsData = entries.map((day) => ({x: day.date as any, y: 20, label: `${Math.ceil(day.incidence)}`}))\n\n  return <div className={classes.body}>\n    <h3>{ regionData.name }</h3>\n\n    <XYPlot height={ 300 } width={ screenWidth } xType=\"ordinal\">\n      <VerticalGridLines />\n      <HorizontalGridLines />\n      <XAxis />\n      <YAxis />\n      <VerticalBarSeries colorType=\"log\" data={graphData}  barWidth={0.8} colorRange={colors} colorDomain={[0, 1, 2, 3, 4]}/>\n      <LabelSeries data={casesLabelsData} xType=\"ordinal\" labelAnchorX=\"middle\"/>\n      <LabelSeries data={incidenceLabelsData} xType=\"ordinal\" labelAnchorX=\"middle\"/>\n    </XYPlot>\n  </div>\n}\n","import CircularProgress from \"@material-ui/core/CircularProgress\";\nimport React, { FunctionComponent } from \"react\";\nimport { useAvailableRegions } from \"../facade/fetchData\";\nimport { Region } from \"./Region\";\n\nexport const RegionList: FunctionComponent = () => {\n  const { data } = useAvailableRegions()\n  if (!data) {\n    return <CircularProgress/>\n  }\n\n  const regions = data.map(rs => <Region key={`region_${rs}`} rs={rs}/>)\n  return <div>{regions}</div>\n}\n","import React, { FunctionComponent } from 'react';\nimport { QueryClient, QueryClientProvider } from 'react-query';\nimport { RegionList } from \"./region/RegionList\";\n\nconst queryClient = new QueryClient()\n\nexport const App: FunctionComponent = () =>\n  (\n    <QueryClientProvider client={ queryClient }>\n      <RegionList/>\n    </QueryClientProvider>\n  )\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}